datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum SportType {
  RUNNING
  CYCLING
  SWIMMING
  ROLLER
  WORKOUT
  CLIMBING
  STRETCH
  OTHER
}

enum Type {
  TRAINING
  LONG_DISTANCE
  COMPETITION
  HOME_WORK
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  distance         Int?
  weight           Float?
  activities_count Int?
  accounts         Account[]
  sessions         Session[]
  activities       Activity[]
  shoes            Shoe[]
  // Optional for WebAuthn support
  Authenticator    Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            String
  provider          String
  providerAccountId String   @unique
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid()) // ID unique pour chaque session
  userId       String
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Activity {
  id                   String    @id @default(cuid())
  name                 String
  distance             Float
  moving_time          Int
  total_elevation_gain Float?
  type                 Type
  sport_type           SportType
  start_date           DateTime  @default(now())
  start_date_local     DateTime?
  trainer              Boolean?
  average_speed        Float     @default(0)
  elev_high            Float?
  elev_low             Float?
  description          String?
  userId               String?
  shoeId               Int?
  Shoe                 Shoe?     @relation(fields: [shoeId], references: [id])
  User                 User?     @relation(fields: [userId], references: [id])
}

model Shoe {
  id         Int        @id @default(autoincrement())
  brand      String
  model      String
  size       Float
  color      String
  material   String
  price      Float
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String?
  activities Activity[]
  User       User?      @relation(fields: [userId], references: [id])
}
